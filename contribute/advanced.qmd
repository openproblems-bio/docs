### Merge
```yaml
__merge__: ../../api/comp_method.yaml
```
This file contains metadata that is needed for all the methods. It will contain the required arguments such as the `--input` files and the `--output` files that are common among all the methods in the task.

```yaml
functionality:
  arguments:
    - name: "--input_train"
      __merge__: anndata_train.yaml
    - name: "--input_test"
      __merge__: anndata_test.yaml
    - name: "--output"
      __merge__: anndata_prediction.yaml
      direction: output
  test_resources:
    - path: ../../../../resources_test/label_projection/pancreas
    - type: python_script
      path: generic_test.py
      text: |
        import anndata as ad
        import subprocess
        from os import path
...
```

You can find more in depth information [here](../create_task/api_component_specs.qmd).

### Additional resources

3. Resources - This section describes the files that need to be included in your component. For example if you'd like to add a file containing model weights called `weights.pt`, add `{ type: file, path: weights.pt }` to the resources. You can now load the additional resource in your script by using at the path `meta['resources_dir'] + '/weights.pt'`.

### NextFlow

2. Nextflow ([docs](https://viash.io/guide))

You can also change the memory and CPU utilization be editing the Nextflow labels section. Available options are `[low|med|high]` for each of `mem` and `cpu`. The corresponding resource values can be found in the `/src/wf_utils/labels.config` file.

### Docker

Docker ([docs](https://viash.io/guide))

:::{.callout-note}
**Tip #2:** You can view the dockerfile that Viash generates from the config file using the `---dockerfile` argument:
```sh
$ viash run -- ---dockerfile
```
:::

## API

For in depth documentation see [API file formats](../create_task/api_file_formats.qmd) and [API components specs](../create_task/api_component_specs.qmd).

In the API directory there are yaml files that have info about the anndata objects. These files all start with `anndata_*.yaml`.

When developing a method it can be useful to check these files on what the anndata objects consist of. For instance the `anndata_dataset.yaml` has information on what is required that the datasets has.

If a new field needs to be added...


## Nextflow

After developing your method you add it to the nextflow workflow that can be found at `task_name/workflows/run/main.nf`

Execute the cmd below to create and build the docker and nextflow filepaths.

```bash
viash ns build -q task_name --paralell --setup cachedbuild
```

```nextflow
// import control methods
include { true_labels } from "$targetDir/label_projection/control_methods/true_labels/main.nf"
include { majority_vote } from "$targetDir/label_projection/control_methods/majority_vote/main.nf"
include { random_labels } from "$targetDir/label_projection/control_methods/random_labels/main.nf"

// import methods
include { knn } from "$targetDir/label_projection/methods/knn/main.nf"
include { mlp } from "$targetDir/label_projection/methods/mlp/main.nf"
include { logistic_regression } from "$targetDir/label_projection/methods/logistic_regression/main.nf"
include { scanvi } from "$targetDir/label_projection/methods/scanvi/main.nf"
include { seurat_transferdata } from "$targetDir/label_projection/methods/seurat_transferdata/main.nf"
include { xgboost } from "$targetDir/label_projection/methods/xgboost/main.nf"
```

Also add your method further down the file with the include name you have given.

```nextflow
// construct a map of methods (id -> method_module)
methods = [ true_labels, majority_vote, random_labels, knn, mlp, logistic_regression, scanvi, seurat_transferdata, xgboost ]
  .collectEntries{method ->
    [method.config.functionality.name, method]
  }
```

### Workflow test

testing of the full workflow can be done by using the following command:

`task_name/workflows/run/run_test.sh`