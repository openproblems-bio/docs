---
title: Requirements
order: 1
---

{{< include _os_chooser.md >}}

This page describes how to set up your system so you can start contributing to OpenProblems. If you just want to [analyse the results](/documentation/analyse_results/) or [run a method, metric or pipeline](/documentation/execute/), please click on on the respective links.

To start contributing to OpenProblems, you need to have the following software installed:

* Bash (>= 3.2)
* Java Development Kit (>= 11)
* Docker
* Viash (>= 0.6.7)
* Nextflow (>= 21.04)

The following sections provide instructions on how to install each of these tools.


## Step 1: install Bash

::: {.panel-tabset}
## Debian/Ubuntu
Bash is already included in most Debian- and Ubuntu-based distributions. However, if for some reason it's not installed, open a terminal and run the following commands:

```bash
sudo apt-get update
sudo apt-get install bash
```


## RHEL/Fedora
Bash is already included in most RHEL- and Fedora-based distributions. However, if for some reason it's not installed, open a terminal and run the following commands:

```bash
sudo yum install bash
```


## Arch
Bash is already included in most Arch-based distributions. However, if for some reason it's not installed, open a terminal and run the following commands:

```bash
sudo pacman -S bash
```

## macOS

Bash is already included in macOS.


## Windows

You will need to install Ubuntu using Windows Subsystem for Linux (WSL).

Open **PowerShell** or **Windows Command Prompt** in administrator mode by right-clicking and selecting "Run as administrator". Enter the following command to enable the features necessary to run WSL and install the Ubuntu distribution of Linux.

```powershell
wsl --install
```

After rebooting the system, open **Ubuntu** by visiting the Windows Start menu or by entering the `ubuntu` command in PowerShell or Windows Command Prompt. Since Bash is already included in Ubuntu, no further actions are needed.


*Content adapted from the [WSL installation instructions](https://learn.microsoft.com/en-us/windows/wsl/install)*

:::

Verify that you have Bash version 3.2 or higher.

```bash
bash --version
```

Example output:

    GNU bash, version 5.1.8
    ...


## Step 2: install Java

You will need Oracle Java >=11 or OpenJDK >=11 to be installed.

::: {.panel-tabset}
## Debian/Ubuntu
Run the following commands:

```bash
sudo apt-get update
sudo apt-get install openjdk-11-jdk
```


## RHEL/Fedora
Run the following command:

```bash
sudo yum install java-11-openjdk-devel
```

## Arch
Run the following command:

```bash
sudo pacman -S jdk11-openjdk
```

## macOS

If haven't done so already, first install Homebrew:

```bash
/bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
```

Next, install Java 11 by running:

```bash
brew install openjdk@11
```


## Windows

Open Ubuntu in WSL and run the following commands:


```bash
sudo apt-get update
sudo apt-get install openjdk-11-jdk
```

:::


Verify that you have Java version 11 or higher.

```bash
java -version
```

Example output:

    openjdk version "19.0.1" 2022-10-18


## Step 3: install Docker


::: {.panel-tabset}
## Debian/Ubuntu

Update package index by running:
```bash
sudo apt update
```

Install Docker by running:
```bash
sudo apt install docker.io
```

Enable the Docker service automatically at boot by running:
```bash
sudo systemctl enable docker
```

Add the current user to the Docker group by running:
```bash
sudo usermod -aG docker $USER
```

## RHEL/Fedora

On RHEL, run the following commands:
```bash
sudo yum install -y yum-utils
sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/rhel/docker-ce.repo
sudo yum install docker-ce docker-ce-cli containerd.io docker-compose-plugin
```

On Fedora, run the following commands:
```bash
sudo dnf -y install dnf-plugins-core
sudo dnf config-manager \
    --add-repo \
    https://download.docker.com/linux/fedora/docker-ce.repo
sudo dnf install docker-ce docker-ce-cli containerd.io docker-compose-plugin
```

Enable the Docker service automatically at boot by running:
```bash
sudo systemctl enable docker
```

Add the current user to the Docker group by running:
```bash
sudo usermod -aG docker $USER
```

## Arch

Install Docker by running:

```bash
sudo pacman -S docker
```

Enable the Docker service automatically at boot by running:
```bash
sudo systemctl enable docker
```

Add the current user to the Docker group by running:
```bash
sudo usermod -aG docker $USER
```

## macOS

Download and install [Docker Desktop for Mac](https://www.docker.com) and download Docker Desktop for Mac.

## Windows

Open Ubuntu in WSL and follow the following instructions.

Update package index by running:
```bash
sudo apt update
```

Install Docker by running:
```bash
sudo apt install docker.io
```

Enable the Docker service automatically at boot by running:
```bash
sudo systemctl enable docker
```

Add the current user to the Docker group by running:
```bash
sudo usermod -aG docker $USER
```

:::


Verify that Docker is working by running:

```bash
docker run hello-world
```

Example output:

    Hello from Docker!
    This message shows that your installation appears to be working correctly.
    ...

## Step 4: install Viash


::: {.panel-tabset}
## Debian/Ubuntu

Install Viash by running:

```bash
mkdir -p "$HOME/.local/bin"

curl -fsSL get.viash.io | bash -s -- --bin "$HOME/.local/bin"
```

Tip: Make sure that the `$HOME/.local/bin` folder is in your `$PATH` variable.

## RHEL/Fedora

Install Viash by running:

```bash
mkdir -p "$HOME/.local/bin"

curl -fsSL get.viash.io | bash -s -- --bin "$HOME/.local/bin"
```

Tip: Make sure that the `$HOME/.local/bin` folder is in your `$PATH` variable.

## Arch

Install Viash by running:

```bash
mkdir -p "$HOME/.local/bin"

curl -fsSL get.viash.io | bash -s -- --bin "$HOME/.local/bin"
```

Tip: Make sure that the `$HOME/.local/bin` folder is in your `$PATH` variable.

## macOS


Install Viash by running:

```bash
mkdir -p "$HOME/.local/bin"

curl -fsSL get.viash.io | bash -s -- --bin "$HOME/.local/bin"
```

Tip: Make sure that the `$HOME/.local/bin` folder is in your `$PATH` variable.

## Windows

Install Viash in Ubuntu by running:

```bash
mkdir -p "$HOME/.local/bin"

curl -fsSL get.viash.io | bash -s -- --bin "$HOME/.local/bin"
```

Tip: Make sure that the `$HOME/.local/bin` folder is in your `$PATH` variable.

:::


Verify that you have Viash version 0.6.7 or higher.

```bash
viash -v
```

Example output:

    viash 0.6.7 (c) 2020 Data Intuitive


## Step 5: install Nextflow

::: {.panel-tabset}
## Debian/Ubuntu

Install Nextflow by running:

```bash
curl -s https://get.nextflow.io | bash
mv nextflow "$HOME/.local/bin"
```

## RHEL/Fedora

Install Nextflow by running:

```bash
curl -s https://get.nextflow.io | bash
mv nextflow "$HOME/.local/bin"
```

## Arch

Install Nextflow by running:

```bash
curl -s https://get.nextflow.io | bash
mv nextflow "$HOME/.local/bin"
```

## macOS


Install Nextflow by running:

```bash
curl -s https://get.nextflow.io | bash
mv nextflow "$HOME/.local/bin"
```

## Windows

Install Nextflow by running:

```bash
curl -s https://get.nextflow.io | bash
mv nextflow "$HOME/.local/bin"
```

:::


Verify that Nextflow and Docker are working by running:

```bash
nextflow run hello -with-docker
```

    N E X T F L O W  ~  version 22.10.4
    Launching `https://github.com/nextflow-io/hello` [compassionate_keller] DSL2 - revision: 4eab81bd42 [master]
    executor >  local (4)
    [d5/78e7a6] process > sayHello (2) [100%] 4 of 4 ✔
    Bonjour world!
    Hello world!
    Hola world!
    Ciao world!


## Troubleshooting common problems

### How to choose the right version of Java

Your system might have multiple versions of Java installed. First determine which versions of Java are installed. This directory can usually be found at `/usr/lib/jvm/`. Example:

```
$ ls -1 /usr/lib/jvm/
java
java-11
java-11-openjdk
java-11-openjdk-11.0.17.0.8-2.el8_6.x86_64
java-1.8.0
java-1.8.0-openjdk
java-1.8.0-openjdk-1.8.0.352.b08-2.el8_6.x86_64
java-19
java-19-openjdk
java-19-openjdk-19.0.0.0.36-2.rolling.el8.x86_64
java-openjdk
jre
jre-11
jre-11-openjdk
jre-11-openjdk-11.0.17.0.8-2.el8_6.x86_64
jre-1.8.0
jre-1.8.0-openjdk
jre-1.8.0-openjdk-1.8.0.352.b08-2.el8_6.x86_64
jre-19
jre-19-openjdk
jre-19-openjdk-19.0.0.0.36-2.rolling.el8.x86_64
jre-openjdk
```

In the example above, it would be recommended to include the following
command as part of your execution script or in your `~/.bashrc`:

```sh
export JAVA_HOME=/usr/lib/jvm/java-19-openjdk
```

### Note: Permission error with Docker

If you get a permission denied error on a Linux system, you may need to add your user to the docker group.

```sh
sudo usermod -aG docker $USER
```

After running the command above, you will need to log out and back in again.
After doing so, run the following commands to verify that everything is working.

```sh
groups
```

    youruser wheel docker

```sh
docker run hello-world
```

    Hello from Docker!
    This message shows that your installation appears to be working correctly.
    ...

### Note: Docker error – the docker daemon is not running

If you get the error above, the Docker daemon may not have been started yet.

Figure out how to enable your system to launch Docker on boot. For example, 
on 
```sh
sudo systemctl enable docker
docker run hello-world
```

    Hello from Docker!
    This message shows that your installation appears to be working correctly.
    ...

### Note: viash command not found

Check whether Viash was indeed installed in your `$HOME/.local/bin` folder by running:

```bash
ls $HOME/.local/bin/viash
```

  /home/youruser/.local/bin/viash

If it was, then the `$HOME/.local/bin` folder is likely not in your `PATH` variable. 
Run the following command to check whether it's missing from your PATH variable:

```bash
echo $PATH
```

    /home/youruser/.local/bin:/home/youruser/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin

If `/home/youruser/.local/bin` is not there, look up instructions on how to add a folder to your PATH variable for your operating system.

### Note: nextflow command not found

Check whether Nextflow was indeed installed in your `$HOME/.local/bin` folder by running:

```bash
ls $HOME/.local/bin/nextflow
```

  /home/youruser/.local/bin/nextflow

If it was, then the `$HOME/.local/bin` folder is likely not in your `PATH` variable. 
Run the following command to check whether it's missing from your PATH variable:

```bash
echo $PATH
```

    /home/youruser/.local/bin:/home/youruser/bin:/usr/local/bin:/usr/local/sbin:/usr/bin:/usr/sbin

If `/home/youruser/.local/bin` is not there, look up instructions on how to add a folder to your PATH variable for your operating system.